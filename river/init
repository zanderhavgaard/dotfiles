#!/bin/sh

# This is the example configuration file for river.
#
# If you wish to edit this, you will probably want to copy it to
# $XDG_CONFIG_HOME/river/init or $HOME/.config/river/init first.
#
# See the river(1), riverctl(1), and rivertile(1) man pages for complete
# documentation.

# Note: the "Super" modifier is also known as Logo, GUI, Windows, Mod4, etc.

# ===== theme =====

riverctl spawn "gsettings set org.gnome.desktop.interface gtk-theme Arc-Dark"
riverctl spawn "gsettings set org.gnome.desktop.interface icon-theme Papirus-Dark"
riverctl spawn "gsettings set org.gnome.desktop.interface cursor-theme Capitaine-Cursors"
riverctl spawn "gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'"

# ===== settings ======

# new windows go to the top of the stack
riverctl attach-mode top

# focus should follow the mouse
riverctl focus-follows-cursor normal

# move mouse cursor when focus changes
riverctl set-cursor-warp on-output-change

# hide the mouse cursor when typing, show again on movement
riverctl hide-cursor when-typing enabled

# Set background and border color
riverctl background-color 0x282c34
riverctl border-color-focused 0x61afef
riverctl border-color-unfocused 0x5c6370
riverctl border-color-urgent 0xe06c75

# add serverside-decorations to all windows
riverctl rule-add ssd

# Set keyboard repeat rate
riverctl set-repeat 50 300

# ===== start-up commands =====

# start different programs depending on which system
if [ "$(hostname)" = 'phobos' ]; then
  bash /home/zander/dotfiles/wlr-randr/phobos.sh
  riverctl spawn nextcloud
elif [ "$(hostname)" = 'gemini' ]; then
  echo ""
elif [ "$(hostname)" = 'prometheus' ]; then
  bash /home/zander/dotfiles/wlr-randr/home.sh
fi

# setup xdg-desktop-portal-wlr
riverctl spawn 'export XDG_CURRENT_DESKTOP=wlroots'
riverctl spawn 'export XDG_SESSION_TYPE=wayland'
riverctl spawn "systemctl --user import-environment DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP XDG_SESSION_TYPE"
riverctl spawn "dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP XDG_SESSION_TYPE"

# start generic background processes
riverctl spawn nm-applet
riverctl spawn mako

# start swayidle to lock the screen automatically
riverctl spawn /home/zander/dotfiles/scripts/swayidle.sh
riverctl spawn "swayidle -w timeout 600 'swaylock -f -c 000000' before-sleep 'swaylock -f -c 000000'"

# ==== waybar ====

# spawn waybar process
riverctl spawn waybar

# ===== wallpaper =====

# start swww daemon
riverctl spawn "swww-daemon --format xrgb"
# keybind to cycle wallpapers
riverctl map normal Super+Control+Shift Space spawn /home/zander/dotfiles/scripts/swww-cycle-wallpaper.sh

# ===== cycle tags =====
# relies on extra riverwm-utils, see:
# https://github.com/NickHastings/riverwm-utils
# You might need to generate wayland protocol files,
# call 'sudo cycle-focused-tags' to do so

riverctl map normal Super Tab spawn "cycle-focused-tags +1 9"
riverctl map normal Super+Shift Tab spawn "cycle-focused-tags -1 9"

# ===== keymaps =====

# take a screenshot with grim, use slurp to select the geometry
# TODO: figure out how to pipe it to clipboard for pasting
riverctl map normal Super+Shift+Control S spawn "wayshot --slurp \"\$(slurp)\" --stdout | wl-copy"

# switch keyboard layouts
riverctl map normal Super+Shift+Control U spawn "riverctl keyboard-layout us"
riverctl map normal Super+Shift+Control D spawn "riverctl keyboard-layout dk"
# for laptop, rebind some keys to be more HHKB-esque
# got a lot of help from here:
# https://github.com/swaywm/sway/wiki#keyboard-layout
riverctl map normal Super+Shift+Control Y spawn "riverctl keyboard-layout -options \"altwin:swap_lalt_lwin\" -variant laptop us"

# Super+Shift+Return to start an instance of foot (https://codeberg.org/dnkl/foot)
# riverctl map normal Super Return spawn <terminal>
riverctl map normal Super Return spawn kitty

# spawen firefox window
riverctl map normal Super W spawn "firefox"

# spawn wofi to launch apps
# riverctl map normal Super D spawn 'wofi --show drun'
riverctl map normal Super D spawn "fuzzel"

# lock the screen with swaylock
riverctl map normal Super+Shift+Control L spawn "swaylock --color 000000"

# Super+Q to close the focused view
riverctl map normal Super+Shift Q close

# Super+Shift+E to exit river
riverctl map normal Super+Shift+Control+Alt Q exit

# Super+J and Super+K to focus the next/previous view in the layout stack
riverctl map normal Super J focus-view next
riverctl map normal Super K focus-view previous

# Super+Shift+J and Super+Shift+K to swap the focused view with the next/previous
# view in the layout stack
riverctl map normal Super+Shift J swap next
riverctl map normal Super+Shift K swap previous

# Super+Period and Super+Comma to focus the next/previous output
# output == monitor
riverctl map normal Super Period focus-output next
riverctl map normal Super Comma focus-output previous

# Super+Shift+{Period,Comma} to send the focused view to the next/previous output
riverctl map normal Super+Shift Period send-to-output -current-tags next
riverctl map normal Super+Shift Comma send-to-output -current-tags previous

# Super+Return to bump the focused view to the top of the layout stack
riverctl map normal Super+Shift Return zoom

# Super + Left Mouse Button to move views
riverctl map-pointer normal Super BTN_LEFT move-view

# Super + Right Mouse Button to resize views
riverctl map-pointer normal Super BTN_RIGHT resize-view

# Super + Middle Mouse Button to toggle float
riverctl map-pointer normal Super BTN_MIDDLE toggle-float

for i in $(seq 1 9); do
  tags=$((1 << (i - 1)))

  # Super+[1-9] to focus tag [0-8]
  riverctl map normal Super "$i" set-focused-tags $tags

  # Super+Shift+[1-9] to tag focused view with tag [0-8]
  riverctl map normal Super+Shift "$i" set-view-tags $tags

  # Super+Control+[1-9] to toggle focus of tag [0-8]
  riverctl map normal Super+Control "$i" toggle-focused-tags $tags

  # Super+Shift+Control+[1-9] to toggle tag [0-8] of focused view
  riverctl map normal Super+Shift+Control "$i" toggle-view-tags $tags
done

# Super+0 to focus all tags
# Super+Shift+0 to tag focused view with all tags
all_tags=$(((1 << 32) - 1))
riverctl map normal Super 0 set-focused-tags $all_tags
riverctl map normal Super+Shift 0 set-view-tags $all_tags

# toggle window floating/tiling
riverctl map normal Super S toggle-float

# Super+F to toggle fullscreen
riverctl map normal Super F toggle-fullscreen

# ===== wideriver =====
riverctl map normal Super up send-layout-cmd wideriver "--layout monocle"
riverctl map normal Super down send-layout-cmd wideriver "--layout wide --stack diminish --count 1 --ratio 0.4"
riverctl map normal Super left send-layout-cmd wideriver "--layout left"
riverctl map normal Super right send-layout-cmd wideriver "--layout right"

riverctl map normal Super Space send-layout-cmd wideriver "--layout-toggle"

riverctl map normal Super plus send-layout-cmd wideriver "--ratio +0.025"
riverctl map normal Super equal send-layout-cmd wideriver "--ratio 0.35"
riverctl map normal Super minus send-layout-cmd wideriver "--ratio -0.025"

# riverctl map normal Super+Shift plus send-layout-cmd wideriver "--count +1"
# riverctl map normal Super+Shift equal send-layout-cmd wideriver "--count 1"
# riverctl map normal Super+Shift minus send-layout-cmd wideriver "--count -1"

riverctl map normal Super+Shift H send-layout-cmd wideriver "--count +1"
riverctl map normal Super+Shift L send-layout-cmd wideriver "--count -1"

riverctl map normal Super+Shift e send-layout-cmd wideriver "--stack even"
riverctl map normal Super+Shift w send-layout-cmd wideriver "--stack dwindle"
riverctl map normal Super+Shift i send-layout-cmd wideriver "--stack diminish"

# Various media key mapping examples for both normal and locked mode which do
# not have a modifier
for mode in normal locked; do
  # Control pulse audio volume with pamixer (https://github.com/cdemoulins/pamixer)
  riverctl map $mode None XF86AudioRaiseVolume spawn 'pamixer -i 5'
  riverctl map $mode None XF86AudioLowerVolume spawn 'pamixer -d 5'
  riverctl map $mode None XF86AudioMute spawn 'pamixer --toggle-mute'
  riverctl map $mode None XF86AudioMicMute spawn 'pamixer --default-source --toggle-mute'

  # Control MPRIS aware media players with playerctl (https://github.com/altdesktop/playerctl)
  riverctl map $mode None XF86AudioMedia spawn 'playerctl play-pause'
  riverctl map $mode None XF86AudioPlay spawn 'playerctl play-pause'
  riverctl map $mode None XF86AudioPrev spawn 'playerctl previous'
  riverctl map $mode None XF86AudioNext spawn 'playerctl next'

  # Control screen backlight brightness with light (https://github.com/haikarainen/light)
  riverctl map $mode None XF86MonBrightnessUp spawn 'brightnessctl set +5%'
  riverctl map $mode None XF86MonBrightnessDown spawn 'brightnessctl set 5%-'
done

# Set the default layout generator to be rivertile and start it.
# River will send the process group of the init executable SIGTERM on exit.
# riverctl default-layout rivertile
riverctl default-layout wideriver

# start rivertile
# rivertile -view-padding 5 -outer-padding 5 -main-ratio '0.5' &

# start wideriver
# TODO: use riverctl spawn?
wideriver \
  --layout left \
  --layout-alt monocle \
  --stack even \
  --count-master 1 \
  --ratio-master 0.50 \
  --count-wide-left 0 \
  --ratio-wide 0.35 \
  --smart-gaps \
  --inner-gaps 5 \
  --outer-gaps 5 \
  --border-width 1 \
  --border-width-monocle 0 \
  --border-width-smart-gaps 0 \
  --border-color-focused "0x61afef" \
  --border-color-focused-monocle "0x5c6370" \
  --border-color-unfocused "0x5c6370" \
  --log-threshold info \
  >"/tmp/wideriver.${XDG_VTNR}.${USER}.log" 2>&1 &
